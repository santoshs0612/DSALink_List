Given a singly linked list of N nodes. Find the first node of the loop if the linked list has a loop. If a loop is present return the node data of the first node of the loop else return -1.

Example 1:

Input:

Output: 3
Explanation:
We can see that there exists a loop 
in the given linked list and the first
node of the loop is 3.
 

Example 2:

Input:

Output: -1
Explanation: No loop exists in the above
linked list.So the output is -1.


//User function Template for C++

/*struct Node
{
    int data;
    struct Node *next;
    Node(int x) {
        data = x;
        next = NULL;
    }

*/
class Solution
{
    public:
     //Function to find first node if the linked list has a loop.
    int findFirstNode(Node* head)
    {
        // your code here
        
        Node* slow= head;
        Node* fast=head;
        while(slow&& fast && fast->next)
        {
            slow=slow->next;
            fast =fast->next->next;
            
            if(slow==fast)
            {
                break;
            }
        }
        if(slow!=fast)
        {
            return -1;
        }
        fast=head;
        while(slow!=fast)
        {
            slow = slow->next;
            fast=fast->next;
        }
        
        return slow->data;
        
        
    }
};
