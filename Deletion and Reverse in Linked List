Given a Circular Linked List of size N. The task is to delete the given node (excluding the first and last node) in the circular linked list and then print the reverse of the circular linked list.

 

Example 1:


Input:
5
2 5 7 8 10
8

Output:
10 7 5 2
Explanation: 
After deleting 8 from the given circular linked 
list, it has elements as 2, 5, 7, 10. Now, 
reversing this list will result in 10, 7, 5, 2.
 

Example 2:

Input:
4
1 7 8 10
8

Output:
10 7 1

Explanation:
After deleting 8 from the given circular linked 
list, it has elements as 1, 7,10. Now, reversing 
this list will result in 10, 7, 1.




/* structure for a node 
struct Node
{
	int data;
	struct Node *next;
};
*/

/* Function to delete a given node from the list */
void deleteNode(struct Node **head, int key)
{

// Your code goes here
    struct Node* head_ref;
    struct Node* head_p= (*head);
    head_ref= (*head);
    struct Node* prev=head_ref;
    while(head_ref->next!=head_p)
    {
    if(head_ref->data==key)
    {
    prev->next=head_ref->next;
    break;
    }
    prev= head_ref;
    head_ref= head_ref->next;
    }
    (*head)=head_p;
    }

/* Function to reverse the linked list */
 void reverse(struct Node** head_ref)
{

// Your code goes here
    struct Node* temp= (*head_ref);
    struct Node* head_p= (*head_ref);
    while(head_p->next!=temp)
    {
        head_p=head_p->next;
    }
    
    struct Node* prev=head_p;
    head_p=temp;
    struct Node* curr= head_p;
    struct Node* nxtp=NULL;
    while(1)
    {
        nxtp= curr->next;
        curr->next=prev;
        prev=curr;
        curr= nxtp;
        if(curr==(*head_ref))
        {
            break;
        }
    }
    (*head_ref)= prev;

}
