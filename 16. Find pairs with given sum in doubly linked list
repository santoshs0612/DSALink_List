Given a sorted doubly linked list of positive distinct elements, the task is to find pairs in a doubly-linked list whose sum is equal to given value target.

 

Example 1:

Input:  
1 <-> 2 <-> 4 <-> 5 <-> 6 <-> 8 <-> 9
target = 7
Output: (1, 6), (2,5)
Explanation: We can see that there are two pairs 
(1, 6) and (2,5) with sum 7.
 

Example 2:

Input: 
1 <-> 5 <-> 6
target = 6
Output: (1,5)
Explanation: We can see that there is one pairs  (1, 5) with sum 6.



//User function Template for C++

/* Doubly linked list node class
class Node
{
public:
    int data;
    Node *next, *prev;
    Node(int val) : data(val), next(NULL), prev(NULL)
    {
    }
};
*/

class Solution
{
public:
    vector<pair<int, int>> findPairsWithGivenSum(Node *head, int target)
    {
        // code here
        vector<pair<int,int>> ans;
        Node* curr_st=head;
        Node* curr_en=head;
        int i=0,j=0;
        while(curr_en->next!=NULL)
        {
            curr_en= curr_en->next;
            j++;
        }
        ///cout<< curr_en->data<<" aa";
        while(i<j)
        {
            int a = curr_st->data;
            int b= curr_en->data;
            if(a+b == target)
            {
                ans.push_back(make_pair(a,b));
                curr_en=curr_en->prev;
                curr_st= curr_st->next;
                i++;
                j--;
                
            }
            else if(a+b>target)
            {
                curr_en=curr_en->prev;
                j--;
            }
            else if(a+b< target) {
                curr_st= curr_st->next;
                i++;
            }
        }
        
        return ans;
    }
};
