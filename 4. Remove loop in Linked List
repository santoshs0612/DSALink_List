Given a linked list of N nodes such that it may contain a loop.

A loop here means that the last node of the link list is connected to the node at position X(1-based index). If the link list does not have any loop, X=0.

Remove the loop from the linked list, if it is present, i.e. unlink the last node which is forming the loop.


Example 1:

Input:
N = 3
value[] = {1,3,4}
X = 2
Output: 1
Explanation: The link list looks like
1 -> 3 -> 4
     ^    |
     |____|    
A loop is present. If you remove it 
successfully, the answer will be 1. 

Example 2:

Input:
N = 4
value[] = {1,8,3,4}
X = 0
Output: 1
Explanation: The Linked list does not 
contains any loop. 

Example 3:

Input:
N = 4
value[] = {1,2,3,4}
X = 1
Output: 1
Explanation: The link list looks like 
1 -> 2 -> 3 -> 4
     |_________|
A loop is present. 
If you remove it successfully, 
the answer will be 1. 





structure of linked list node:

struct Node
{
    int data;
    Node* next;
    
    Node(int val)
    {
        data = val;
        next = NULL;
    }
};

*/

class Solution
{
    public:
    //Function to remove a loop in the linked list.
    void removeLoop(Node* head)
    {
        // code here
        // just remove the loop without losing any nodes
        
        // detecting a loop 
        
        Node* slow=head;
        Node* fast=head;
        
        
        while(slow && fast && fast->next)
        {
            slow=slow->next;
            fast=fast->next->next;
            if(slow==fast)
            {
                break;
            }
        }
        if(slow!=fast)
        {
            return;
        }
        // when slow is at head  
        // This is the special case may fail for some test cases
        else if(slow==head)
        {
            while(fast->next!=slow)
            {
                fast=fast->next;
            }
            fast->next=NULL;
            return;
        }
        else {
        Node*  meet=head;
        Node* prev;
        while(meet!=slow)
        {
            prev=slow;
            meet=meet->next;
            slow=slow->next;
        }
        prev->next=NULL;
        return;
        }
        // while(prev!=head)
        // {
        //     head=head->next;
        // }
        // head->next=NULL;
    }
};
